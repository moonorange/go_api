// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Error Object representing an error
type Error struct {
	// Code Error code that identify of the error
	Code *int32 `json:"code,omitempty"`

	// Message Short description of the error
	Message *string `json:"message,omitempty"`
}

// Tag Object representing a Tag
type Tag struct {
	// Id id of the tag
	Id *string `json:"id,omitempty"`

	// Name name of the tag
	Name string `json:"name"`
}

// Task Object representing a Task
type Task struct {
	// Completed indicates if a task is completed or not
	Completed *bool `json:"completed,omitempty"`

	// Description description of the task
	Description string `json:"description"`

	// Id id of the task
	Id *string `json:"id,omitempty"`
}

// TasksCreateJSONRequestBody defines body for TasksCreate for application/json ContentType.
type TasksCreateJSONRequestBody = Task

// TasksUpdateJSONRequestBody defines body for TasksUpdate for application/json ContentType.
type TasksUpdateJSONRequestBody = Task

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the list of all tags
	// (GET /tag)
	ListTags(w http.ResponseWriter, r *http.Request)
	// Get the list of all tasks
	// (GET /task)
	TasksGetAll(w http.ResponseWriter, r *http.Request)
	// Create a new task
	// (POST /task)
	TasksCreate(w http.ResponseWriter, r *http.Request)
	// Delete an existing task
	// (DELETE /task/{taskId})
	TasksDelete(w http.ResponseWriter, r *http.Request, taskId string)
	// Get a single task based on its id
	// (GET /task/{taskId})
	TasksRead(w http.ResponseWriter, r *http.Request, taskId string)
	// Update an existing task
	// (PUT /task/{taskId})
	TasksUpdate(w http.ResponseWriter, r *http.Request, taskId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get the list of all tags
// (GET /tag)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of all tasks
// (GET /task)
func (_ Unimplemented) TasksGetAll(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task
// (POST /task)
func (_ Unimplemented) TasksCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an existing task
// (DELETE /task/{taskId})
func (_ Unimplemented) TasksDelete(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single task based on its id
// (GET /task/{taskId})
func (_ Unimplemented) TasksRead(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing task
// (PUT /task/{taskId})
func (_ Unimplemented) TasksUpdate(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TasksGetAll operation middleware
func (siw *ServerInterfaceWrapper) TasksGetAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TasksGetAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TasksCreate operation middleware
func (siw *ServerInterfaceWrapper) TasksCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TasksCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TasksDelete operation middleware
func (siw *ServerInterfaceWrapper) TasksDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TasksDelete(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TasksRead operation middleware
func (siw *ServerInterfaceWrapper) TasksRead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TasksRead(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TasksUpdate operation middleware
func (siw *ServerInterfaceWrapper) TasksUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TasksUpdate(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tag", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task", wrapper.TasksGetAll)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/task", wrapper.TasksCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/task/{taskId}", wrapper.TasksDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{taskId}", wrapper.TasksRead)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/task/{taskId}", wrapper.TasksUpdate)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xW0W7bNhT9FeJuj7KlOlmR6i1rg6JAhhRbhj0UeaDFa4k1RXLkVVMj8L8Pl4xjx5a7",
	"FC22bA+JbJm8PDzn8PDeQeN67yxailDfQWw67GX6eBGCC/xBYWyC9qSdhRqu5h+xIRHQB4xoSdtWSCsw",
	"jS7AB+cxkMZUo3EKD0ukyoJ/E9RJElpxncVKuIWgDh9q4WfZe4NQw2lVQQELF3pJUIO2dDKDAmjlMX/F",
	"FgOsC+gxRtmOrPlb5wKJnXfHF3vtBqOEdSQ8Bl4zjSMZl9slIwVtW1ivH964xAtjuJbtE2kTPHSfM60O",
	"Z2u1gUtpxhYsvmjmsxNVTV42c5ycytmryfyns5eT+UKezk7nzauThYICAkp1Zc0KagoDHmyjACv7Edb4",
	"7bGV/3BhnJCAfw46oIL6Qy57M0pSXD6dpUT9vrUYB+EYW1bpRhJGoRdCJuWEjuJhhnCB5d2CnztnUFrG",
	"9ajSfuER+9zbYkvLLyuhe+8CSUtHTFP8rcZ7Nb+PyHvS7K5+qBCP1nbhDnGei6gZl5DeG+aZ2SAnOmmV",
	"yeDjFAowukEbk6myueCiMdpHFO+HudGNuMwDxGzKh3sIBmroiHysy/L29naKefjUhbbkP+WaoeegKtGb",
	"yWxalRfvL/k57ag3TCtpSnydi+urN1cT9o0wOtIuVCjgE4aY9/JiWk0rnuk8Wuk11HAyraYv2G2SumS0",
	"kvJ5bpH4wR5Mhd4pqOFSR7qWbUzsR+9szO6cVVU2qSW0ad4OhPJjzO7KaZsOPWGfJv4YcAE1/FBuc7m8",
	"D+WS02IbODIEucpCPRaIMbGVpDF8aGO29UIOhr4K05eg5MthZPG3aDHoJseq2HCSzBeHvpdhlQZRMrrZ",
	"R1pAetQf+Ak3PKuk+6QY5Z8ljm+Rzo35hySIy6/XIC7/MyIw1F0V4hJu1gV4F4+x/zqgJIQcLhjpZ6dW",
	"322Lme91zq5vEPcpa+yzeN2haNLmVI7kZydhpl5IYfH24a55LN3mBJV3/P+dWudA53vwiJ5v8o8HhJ8e",
	"XgUpYHMxtYPxudGUd5S61M86pqZinKziCyHzK0oF/4ILr5bPMzqkiNq29xe+mMvIfZUVmqLQajRCZJA9",
	"EgZ+fTdy1r69AdJcii9u2DS0kF0Pu61Pbo62PO23STcF+OGYDX736v+bdkPa3HNNu0z9E45xmobh08Zq",
	"29ayLkvjGmk6F6k+q86qkpxy0ntg1e/LjKZcL61skdvPx96C9c36rwAAAP//VU7ZiEUPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
